name: Release Binaries

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      pyinstaller_spec:
        description: "Path to .spec file (leave empty to auto-generate)"
        required: false
        default: "pyinstaller.spec"

  # Build + publish when pushing a version tag like v0.1.0
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write  # needed to create/upload Release assets on tag pushes

jobs:
  build:
    name: Build (${{ matrix.os }}, py${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    env:
      QT_QPA_PLATFORM: offscreen
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PYTHONDONTWRITEBYTECODE: "1"

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        # Use a single, stable Python for packaging; stick with the same across OSes.
        python-version: ["3.11"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Derive version from ref
        id: version
        shell: bash
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "version=${GITHUB_REF_NAME#v}" >> "$GITHUB_OUTPUT"
          else
            echo "version=0.0.0-dev-${GITHUB_SHA::7}" >> "$GITHUB_OUTPUT"
          fi
          echo "Building version: ${{ steps.version.outputs.version }}"

      - name: Install Qt runtime libs (Ubuntu only)
        if: startsWith(matrix.os, 'ubuntu')
        shell: bash
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libegl1 \
            libgl1 \
            libgl1-mesa-dri \
            libopengl0 \
            libxkbcommon0 \
            libxcb1 \
            libx11-xcb1 \
            libxrandr2 \
            libxext6 \
            libxi6 \
            libcups2 \
            libdbus-1-3 \
            libnss3 \
            libxshmfence1 \
            libdrm2 \
            libgbm1 \
            libfreetype6 \
            fonts-dejavu-core
          # sanity check
          ldconfig -p | grep -E 'libEGL\.so\.1|libGL\.so\.1' || true

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install build dependencies
        shell: bash
        run: |
          python -m pip install -U pip wheel
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # dev-requirements may not be needed but won't hurt if present
          if [ -f dev-requirements.txt ]; then pip install -r dev-requirements.txt; fi
          pip install pyinstaller

      # -------- Build (Linux/macOS) --------
      - name: Build with PyInstaller (*nix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euxo pipefail
          SPEC_INPUT="${{ github.event.inputs.pyinstaller_spec }}"
          if [[ -n "${SPEC_INPUT}" && -f "${SPEC_INPUT}" ]]; then
            pyinstaller "${SPEC_INPUT}"
          elif [[ -f "pyinstaller.spec" ]]; then
            pyinstaller pyinstaller.spec
          else
            # Fallback: onefile GUI app from pymd/__main__.py
            pyinstaller -n PyMarkdownEditor --onefile -w pymd/__main__.py
          fi

      # -------- Build (Windows) --------
      - name: Build with PyInstaller (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $specInput = "${{ github.event.inputs.pyinstaller_spec }}"
          if ($specInput -and (Test-Path $specInput)) {
            pyinstaller $specInput
          } elseif (Test-Path "pyinstaller.spec") {
            pyinstaller pyinstaller.spec
          } else {
            pyinstaller -n PyMarkdownEditor --onefile -w pymd/__main__.py
          }

      # -------- Package (*nix) --------
      - name: Package artifacts (*nix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p package
          echo "Dist contents:"
          ls -la dist || true

          OS_TAG=$([ "${{ runner.os }}" = "Linux" ] && echo "linux" || echo "macos")
          VERSION="${{ steps.version.outputs.version }}"

          if [[ -d "dist/PyMarkdownEditor.app" ]]; then
            # macOS app bundle -> tar.gz
            tar -czf "package/PyMarkdownEditor-${VERSION}-${OS_TAG}.tar.gz" -C dist PyMarkdownEditor.app
          elif [[ -d "dist/PyMarkdownEditor" ]]; then
            # onedir -> tar.gz
            tar -czf "package/PyMarkdownEditor-${VERSION}-${OS_TAG}.tar.gz" -C dist PyMarkdownEditor
          elif [[ -f "dist/PyMarkdownEditor" ]]; then
            # onefile -> binary
            cp "dist/PyMarkdownEditor" "package/PyMarkdownEditor-${VERSION}-${OS_TAG}"
            chmod +x "package/PyMarkdownEditor-${VERSION}-${OS_TAG}"
          else
            echo "No expected outputs in dist/"
            exit 1
          fi

      - name: Upload artifacts (*nix)
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: PyMarkdownEditor-${{ runner.os }}-${{ steps.version.outputs.version }}
          path: package/**
          if-no-files-found: error
          compression-level: 9
          overwrite: true

      # -------- Package (Windows) --------
      - name: Package artifacts (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path package | Out-Null
          $version = "${{ steps.version.outputs.version }}"
          if (Test-Path "dist/PyMarkdownEditor.exe") {
            Copy-Item "dist/PyMarkdownEditor.exe" "package/PyMarkdownEditor-$version-windows.exe"
          } elseif (Test-Path "dist/PyMarkdownEditor") {
            Compress-Archive -Path "dist/PyMarkdownEditor/*" -DestinationPath "package/PyMarkdownEditor-$version-windows.zip" -Force
          } else {
            Write-Error "No expected outputs found in dist/"
            exit 1
          }

      - name: Upload artifacts (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: PyMarkdownEditor-${{ runner.os }}-${{ steps.version.outputs.version }}
          path: package/**
          if-no-files-found: error
          overwrite: true

  publish:
    name: Publish GitHub Release assets
    # Only run when the ref is a tag (i.e., a versioned release)
    if: github.ref_type == 'tag'
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts

      - name: List artifacts
        run: |
          ls -R release_artifacts || true

      - name: Create/Update GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          files: |
            release_artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
