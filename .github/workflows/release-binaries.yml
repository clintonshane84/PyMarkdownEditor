name: Build & Release Binaries

on:
  push:
    tags:
      - "v*.*.*"   # e.g., v0.2.0

permissions:
  contents: write  # required to create/update releases and upload assets

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    env:
      QT_QPA_PLATFORM: offscreen  # headless Qt (for any render/tests you may add)
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PYTHONDONTWRITEBYTECODE: "1"

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install runtime + build deps
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f build-requirements.txt ]; then pip install -r build-requirements.txt; fi
        shell: bash

      - name: Build with PyInstaller (spec)
        run: |
          pyinstaller pyinstaller.spec
        shell: bash

      # Normalize & package outputs per platform
      - name: Package artifacts
        id: pack
        run: |
          set -e
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            OUT="PyMarkdownEditor-windows-x86_64.exe"
            cp "dist/PyMarkdownEditor/PyMarkdownEditor.exe" "$OUT"
            echo "asset=$OUT" >> $GITHUB_OUTPUT
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            APP="dist/PyMarkdownEditor.app"
            OUT="PyMarkdownEditor-macos-universal.zip"
            /usr/bin/zip -r "$OUT" "$APP"
            echo "asset=$OUT" >> $GITHUB_OUTPUT
          else
            OUT="PyMarkdownEditor-linux-x86_64"
            cp "dist/PyMarkdownEditor/PyMarkdownEditor" "$OUT"
            chmod +x "$OUT"
            echo "asset=$OUT" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Upload artifact (for inspection)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.pack.outputs.asset }}
          path: ${{ steps.pack.outputs.asset }}

  release:
    name: Create/Update Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-artifacts

      - name: Create or Update GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: |
            Automated build for ${{ github.ref_name }}.
            See CHANGELOG.md for details.
          files: |
            dist-artifacts/**/*
