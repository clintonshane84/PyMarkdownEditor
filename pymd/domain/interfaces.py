from __future__ import annotations

from abc import ABC, abstractmethod
from collections.abc import Iterable
from pathlib import Path
from typing import Protocol


class IMarkdownRenderer(Protocol):
    """Convert Markdown text to full HTML string (including CSS)."""

    def to_html(self, markdown_text: str) -> str: ...


class IFileService(Protocol):
    """Read/write text files. Writes should be atomic when possible."""

    def read_text(self, path: Path) -> str: ...
    def write_text_atomic(self, path: Path, text: str) -> None: ...


class ISettingsService(Protocol):
    """Persist and retrieve lightweight UI state."""

    def get_geometry(self) -> bytes | None: ...
    def set_geometry(self, blob: bytes) -> None: ...
    def get_splitter(self) -> bytes | None: ...
    def set_splitter(self, blob: bytes) -> None: ...
    def get_recent(self) -> list[str]: ...
    def set_recent(self, recent: Iterable[str]) -> None: ...


class IExporter(ABC):
    """Export strategy interface. Implementations export HTML to a given format/path."""

    name: str  # e.g. "html", "pdf"
    label: str  # e.g. "Export HTMLâ€¦"

    @abstractmethod
    def export(self, html: str, out_path: Path) -> None:
        """Perform export. 'html' contains a full HTML document string."""
        raise NotImplementedError


class IMarkdownView:  # implemented by MainWindow
    def set_editor_text(self, text: str) -> None: ...
    def editor_text(self) -> str: ...
    def set_preview_html(self, html: str) -> None: ...
    def set_title(self, title: str) -> None: ...
    def set_status(self, msg: str, ms: int = 3000) -> None: ...
    def toggle_preview(self, on: bool) -> None: ...
    def toggle_wrap(self, on: bool) -> None: ...

    # events exposed as Qt signals or simple call-ins
    # e.g., on_text_changed, on_new, on_open, on_save, etc.


class IExporterRegistry:
    def all(self) -> list[IExporter]: ...
    def get(self, name: str) -> IExporter: ...


class IFileDialogService:
    def open_file(self, caption: str, filters: str) -> Path | None: ...
    def save_file(self, caption: str, start: str, filters: str) -> Path | None: ...


class IMessageService:
    def error(self, title: str, text: str) -> None: ...
    def question_yes_no(self, title: str, text: str) -> bool: ...
